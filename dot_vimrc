:syntax on

:set incsearch
":set hlsearch
:set smartcase
:set ignorecase
:set laststatus=2
:set t_Co=256
:set wildmenu
:set wildmode=list:longest,full
:set noswapfile
:set hidden
":set nofoldenable
:set textwidth=79
:set colorcolumn=+1
:set autoindent

" :highlight Search ctermfg=White
" :highlight Search ctermbg=Red
" :highlight Comment ctermfg=LightGray

let mapleader = ","

" PLUGINS BEGIN .................
" See ~/.vim/pack/plugins

" "vim-easyescape"
" -- remap the ESC key to jj (to exit insert mode easily)
let g:easyescape_chars = { "j": 2 }
let g:easyescape_timeout = 300
cnoremap jj <Esc>

" "CtrlP"
" -- shortcut
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
" -- where to search
let g:ctrlp_working_path_mode = 'c'

" Notes:
"	a) Ctrl-j|k : scroll through files
"	b) Ctrl-t   : open file in tab
"	c) Ctrl-f   : change modes
"	d) Ctrl-d   : switch to filename search instead of full path
"	e) Ctrl-z   : mark multiple files

" "vim-airline"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_theme = 'bubblegum'

" "vim-gitgutter"
set updatetime=250

" PLUGINS END .................

" cycle through buffers
:nnoremap <Left> :bprevious<CR>	" previous buffer with Left arrow key
:nnoremap <Right> :bnext<CR>    " next buffer with Rigt arrow key

" navigate windows
nmap <silent> <space>k :wincmd k<CR> " go Up with "SPACE, k"
nmap <silent> <space>j :wincmd j<CR> " go Down with "SPACE, j"
nmap <silent> <space>h :wincmd h<CR> " go Left with "SPACE, h"
nmap <silent> <space>l :wincmd l<CR> " go Right with "SPACE, l"

" resize split windows
map <silent> <C-h> <C-w>< " less cols (vert split) with "C-h"
map <silent> <C-l> <C-w>> " more cols (vert split) with "C-l"
map <silent> <C-j> <C-W>- " less rows (horiz split) with "C-j"
map <silent> <C-k> <C-W>+ " more rows (horiz split) with "C-k"

" Toggle with ",w"
" view tabs and trailing spaces
set listchars=tab:>-,trail:Â·,eol:$
nmap <silent> <leader>w :set nolist!<CR>

" Toggle with ",f" and ",g"
" auto-wrap using textwidth
map <leader>f :set fo+=t<CR> " ON"
map <leader>g :set fo-=t<CR> " OFF"

" Add a line above, "99"
" (w/o entering Insert mode)
nnoremap 99 O<Esc>j
" Add a line below, "88"
" (w/o entering Insert mode)
nnoremap 88 o<Esc>k

" Add a space to the right, ",s"
" (w/o entering Insert mode)
nmap <silent> <leader>s a<space><Esc>h

" Reformat current paragraph, ",r"
" (includes the removal of double spaces)
nmap <silent> <leader>r vipgqgv:s/  / /g<CR>

" COMMENTS
" insert/remove '#' at beginning of visual block lines with "#" and ",#"
vmap # :s/^/# /<CR>gv<Esc>
vmap <leader># :s/^# //<CR>gv<Esc>
" insert/remove '"' at beginning of visual block lines with """ and ",""
vmap " :s/^/" /<CR>gv
vmap <leader>" :s/^" //<CR>gv

" Only turn on spelling for certain filetypes
autocmd FileType md,markdown setlocal spell spelllang=en_gb
" (add a word with "zg")
" (remove a word with "zug")

" F4 key
" fold & unfold visual/non-visual blocks
nnoremap <F4> za
vnoremap <F4> zf

" F5 key
" toggle highlighted search
map <F5> :set hls!<bar>set hls?<CR>

" F6 key
" toggle the spellchecker
:map <F6> :setlocal spell! spelllang=en_gb<CR>
" Enable spellcheck by default (and add a word with "zg")
:set spell spelllang=en_gb

" F7 key
" copy the current filename onto the system clipboard
" use 'p' to paste (as usual)
nnor <F7> :let @"=expand("%")<CR>

" F12 key
" allow reliable pasting from other apps
nnoremap <F12> :set invpaste paste?<CR>
imap <F12> <C-O><F12>
set pastetoggle=<F12>

" Ctrl-x
" dictionary
"""set dictionary=/usr/share/dict/words

" remove all whitespace at the end of lines
" autocmd BufWritePre * :%s/\s\+$//e

" THEMES
" make some themes transparent
autocmd ColorScheme * highlight Normal ctermbg=None
autocmd ColorScheme * highlight NonText ctermbg=None
"colorscheme xoria256
colorscheme jellybeans
"colorscheme vibrantink
"colorscheme wuye

" MACROS
" for writing in Markdown
let @a = 'o```bashjj'		  " insert bash syntax highlighting
let @b = 'o```jj'		  " close syntax highlighting
let @c = 'o```no-highlightjj'	  " insert no-highlight syntax highlighting
let @n = 'o!!! Note:    '	  " insert a Note admonishment
let @t = 'oTODO:  '		  " insert a TODO line
let @l = 'o<!-- LINKS -->'  " insert a LINKS line

" set a text width depending on file extension
if has('autocmd')
	au BufRead,BufNewFile *.xml set tw=150
	au BufRead,BufNewFile *.sh set tw=135
endif

" remap the ; key to ` (to go to a mark's exact cursor position easily)
" ; is easier to reach than `
:nnoremap ; `

" encryption
:set cryptmethod=blowfish
autocmd BufReadPost * if &key != "" | set noswapfile nowritebackup viminfo= nobackup noshelltemp history=0 secure | endif
