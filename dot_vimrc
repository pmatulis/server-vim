syntax on

set incsearch
set smartcase
set ignorecase
set laststatus=2
set t_Co=256
set wildmenu
set wildmode=list:longest,full
set noswapfile
set hidden
set autoindent
set encoding=utf-8
set spellcapcheck=

let mapleader = ","

" vim-polyglot install instructions say to do this
let g:polyglot_disabled = ['markdown']

" remap the ; key to `
" to go to a mark's exact cursor position easily
" (; is easier to reach than `)
nnoremap ; `

" encryption
set cryptmethod=blowfish
autocmd BufReadPost * if &key != "" | set noswapfile nowritebackup viminfo= nobackup noshelltemp history=0 secure | endif

" cursor shapes based on mode
" insert: ibeam
let &t_SI = "\<Esc>[6 q"
" replace: underline
let &t_SR = "\<Esc>[4 q"
" normal: block
let &t_EI = "\<Esc>[2 q"

" use textwidth (t)
" Auto-wrap comments and add leader character (c)
" Allow reformatting with gq (q)
" Recognize numbered lists when formatting text (n)
set formatoptions+=tcqn

" toggle formatoptions with ",f" and ",g"
map <leader>f :set fo+=tcqn<CR> " ON"
map <leader>g :set fo-=tcqn<CR> " OFF"

" visual queue when auto-wrapping is disabled (the default)
augroup OVER_COLOUR
  autocmd BufEnter * highlight OverLength ctermfg=darkgrey
augroup END
" print a column at 80 characters
set textwidth=79 colorcolumn=+1
" use OVER_COLOUR when over 80 characters
autocmd BufEnter * match OverLength /\%80v.*/

" environment function sets up:
"   - table style for REAMDE.md and RST files
"       via plugin "vim-table-mode" (enable with ",tm")
function! Environment()
  let l:path = expand('%:p')
  if l:path =~ '.*/README.md'
    let g:table_mode_corner='|'
  elseif l:path =~ '.*/.*.rst'
    let g:table_mode_corner_corner='+'
    let g:table_mode_header_fillchar='='
  endif
endfunction
autocmd! BufReadPost,BufNewFile * call Environment()

"augroup BufNewFile,BufRead *.py
"    \ set tabstop=4
"    \ set softtabstop=4
"    \ set shiftwidth=4
"    \ set textwidth=79
"    \ set expandtab
"    \ set autoindent
"    \ set fileformat=unix

" PLUGINS BEGIN .................
" see ~/.vim/pack/plugins

" "vim-startify"
let g:startify_session_dir = '~/.vim_startify_sessions'
let g:startify_bookmarks = [
 \ { 'i': 'reference-install.md'},
 \ { 'r': 'reference-release-notes.md'} ]
let g:startify_session_persistence = 1
let g:startify_files_number = 6
let g:startify_lists = [
 \ { 'type': 'dir',       'header': [   'MRU '. getcwd()] },
 \ { 'type': 'sessions',  'header': [   'Sessions']       },
 \ { 'type': 'bookmarks', 'header': [   'Bookmarks']      },
 \ { 'type': 'commands',  'header': [   'Commands']       },
 \ ]

" "vim-easyescape"
" -- remap the ESC key to jj (to exit insert mode easily)
let g:easyescape_chars = { "j": 2 }
let g:easyescape_timeout = 300
cnoremap jj <Esc>

" "CtrlP"
" -- shortcut
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
" -- where to search
let g:ctrlp_working_path_mode = 'c'
let g:ctrlp_open_multiple_files = 'tj'

" Notes:
"  a) Ctrl-j|k : scroll through files
"  b) Ctrl-t   : open file in tab
"  c) Ctrl-f   : change modes
"  d) Ctrl-d   : switch to filename search instead of full path
"  e) Ctrl-z   : mark multiple files

" "vim-airline"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_theme = 'bubblegum'

" "vim-gitgutter"
set updatetime=250

" PLUGINS END .................

" sudo saving with ":W"
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!

" cycle through buffers
nnoremap <Left> :bprevious<CR> " previous buffer with Left arrow
nnoremap <Right> :bnext<CR>    " next buffer with Right arrow

" navigate windows
nmap <silent> <space>k :wincmd k<CR> " go Up with "SPACE, k"
nmap <silent> <space>j :wincmd j<CR> " go Down with "SPACE, j"
nmap <silent> <space>h :wincmd h<CR> " go Left with "SPACE, h"
nmap <silent> <space>l :wincmd l<CR> " go Right with "SPACE, l"

" resize split windows
map <silent> <C-h> <C-w>< " less cols (vert split) with "C-h"
map <silent> <C-l> <C-w>> " more cols (vert split) with "C-l"
map <silent> <C-j> <C-W>- " less rows (horiz split) with "C-j"
map <silent> <C-k> <C-W>+ " more rows (horiz split) with "C-k"

" copy and paste using system clipboard
" vmap <C-c> "*y     " Yank visual block with "C-c"
" nmap <C-c> "*Y     " Yank current line with "C-c"
" nmap <C-x> "*p     " Paste with "C-x"

vmap <C-c> :w! ~/.vbuf<CR>      " yank visual selection to ~/.vbuf
nmap <C-c> :.w! ~/.vbuf<CR>     " yank current line to the buffer file if no visual selection
nmap <C-x> :r ~/.vbuf<CR>       " paste the contents of the buffer file (C-v is already taken)

" add a line above with "99"
" (w/o entering Insert mode)
nnoremap 99 O<Esc>j
" add a line below with "88"
" (w/o entering Insert mode)
nnoremap 88 o<Esc>k

" add a space to the right with ",s"
" (w/o entering Insert mode)
nmap <silent> <leader>s a<space><Esc>h

" reformat current paragraph with ",r"
" (includes the removal of double spaces)
nmap <silent> <leader>r vipgqgv:s/  / /g<CR>

" Stamp (overwrite) current word with last yanked or deleted word with ",S"
nnoremap <leader>S "_diwP

" Comments
" insert/remove '#' at beginning of visual block lines with "#" and ",#"
vmap # :s/^/# /<CR>gv<Esc>
vmap <leader># :s/^# //<CR>gv<Esc>

" enable spellchecking by default
":set spell spelllang=en_gb
" enable spellchecking by default but only for certain file types
autocmd FileType markdown,rst setlocal spell spelllang=en_gb
" add a word with "zg"
" remove a word with "zug"

" SPACE key
" fold & unfold visual/non-visual blocks
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" F5 key
" toggle highlighted search
map <F5> :set hls!<bar>set hls?<CR>

" F6 key
" toggle the spellchecker
map <F6> :setlocal spell! spelllang=en_gb<CR>

" F7 key
" toggle the display of non-printable characters
nnoremap <F7> :set list! list?<CR>

" F12 key
" toggle reliable pasting from other apps
nnoremap <F12> :set invpaste paste?<CR>
imap <F12> <C-O><F12>
set pastetoggle=<F12>

" THEMES
"colorscheme PaperColor
"colorscheme zenburn
"colorscheme xoria256
"colorscheme jellybeans
"colorscheme apprentice
"colorscheme tender
"colorscheme iceberg
"colorscheme afterglow
"colorscheme triplejelly
"colorscheme seoul256
colorscheme herald

highlight Title ctermbg=234 ctermfg=77
highlight Normal ctermbg=234 ctermfg=255
highlight NonText ctermbg=234 ctermfg=204
highlight SpellBad ctermbg=238 ctermfg=009
highlight SpellLocal ctermbg=238 ctermfg=183
highlight String ctermbg=234 ctermfg=249
highlight Visual ctermbg=238 ctermfg=255
highlight ColorColumn ctermbg=235

" set a text width and other things depending on file extension
if has('autocmd')
   au BufRead,BufNewFile *.xml set tw=150
   au BufRead,BufNewFile *.sh set tw=135
   au BufWritePre *.rst :%s/\s\+$//e
endif

" display cursor column
" toggle with ",c"
highlight CursorColumn ctermfg=darkgrey
nnoremap <Leader>c :set cursorcolumn!<CR>

" display cursor line
" toggle with ",l"
highlight CursorLine ctermfg=darkgrey
nnoremap <Leader>l :set cursorline!<CR>

" show tabs (edit listchars to show other things)
highlight SpecialKey ctermfg=000 ctermbg=229
set list
"set listchars=tab:>-
set listchars=tab:␉· "U 2409 and U 00B7

" show trailing spaces (but not when typing)
highlight ExtraWhitespace ctermbg=160
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
"autocmd BufWinLeave * call clearmatches()

autocmd CursorMovedI <buffer> call rsth#Heading()
